name: 'Terraform'

on:
  - push
  - pull_request

permissions:
  contents: read

jobs:
  terraform:
    name: 'Terraform'
    runs-on: ubuntu-latest
    environment: production

    # Use the Bash shell regardless whether the GitHub Actions runner is ubuntu-latest, macos-latest, or windows-latest
    defaults:
      run:
        shell: bash

    steps:
    # Checkout the repository to the GitHub Actions runner
    - name: Checkout
      uses: actions/checkout@v3

    - name: GCP Auth
      uses: google-github-actions/auth@v1
      with:
        credentials_json: ${{ secrets.GCP_CREDENTIALS }}

    # Install the latest version of Terraform CLI and configure the Terraform CLI configuration file with a Terraform Cloud user API token
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1

    - name: Generate Terraform var arguments
      id: gen-args
      run: |
        echo "vars=\"" >> "$GITHUB_OUTPUT"

    # Initialize a new or existing Terraform working directory by creating initial files, loading any remote state, downloading modules, etc.
    - name: Terraform Init
      run: terraform init --backend-config="bucket=${{ secrets.GCP_BACKEND_BUCKET }}" --backend-config="prefix=${{ secrets.GCP_BACKEND_PREFIX }}" -input=false

    # Generates an execution plan for Terraform
    - name: Terraform Plan
      run: terraform plan -out=tfplan -var='project=${{ secrets.GCP_PROJECT }}' -var='region=${{ secrets.GCP_REGION }}' -var='zone=${{ secrets.GCP_ZONE }}'

    - name: Show GH vars
      run: |
        echo ${{ github.event.ref }}
        echo ${{ github.event_name }}
        echo ${{ github.event.action }}
        echo ${{ github.event.pull_request.merged }}

    - name: Terraform Apply
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
      run: terraform apply "tfplan" -auto-approve
    
    - name: Terraform Output
      if: github.event_name == 'push' && github.event.ref == 'refs/heads/main'
      run: terraform output -json